# 函数cv2.Canny()实现Canny边缘检测

# 步骤1：去噪。噪声会影响边缘检测的准确性，因此首先要将噪声过滤掉。
# 步骤2：计算梯度的幅度与方向。
# 步骤3：非极大值抑制，即适当地让边缘“变瘦”。
# 步骤4：确定边缘。使用双阈值算法确定最终的边缘信息。

# 由于图像边缘非常容易受到噪声的干扰，因此为了避免检测到错误的边缘信息，
# 通常需要对图像进行滤波以去除噪声。滤波的目的是平滑一些纹理较弱的非边缘区域，
# 以便得到更准确的边缘
# 通常采用高斯滤波去除图像中的噪声
# 
# Canny边缘检测分为如下几个步骤。
# 步骤1：去噪。噪声会影响边缘检测的准确性，因此首先要将噪声过滤掉。
# 步骤2：计算梯度的幅度与方向。
# 步骤3：非极大值抑制，即适当地让边缘“变瘦”。
# 步骤4：确定边缘。使用双阈值算法确定最终的边缘信息。
# 下面对上述步骤分别进行简单的介绍。

import cv2
o=cv2.imread("lena.bmp",cv2.IMREAD_GRAYSCALE)
r1=cv2.Canny(o,128,200)
r2=cv2.Canny(o,32,128)
cv2.imshow("original",o)
cv2.imshow("result1",r1)
cv2.imshow("result2",r2)
cv2.waitKey()
cv2.destroyAllWindows()

# 当函数cv2.Canny（）
# 的参数threshold1和threshold2的值较小时，能够捕获更多的边缘信息。